// ──────────── Ignore whitespace & newlines ────────────
%import common.WS_INLINE
%import common.NEWLINE
%import common.ESCAPED_STRING
%ignore WS_INLINE
%ignore NEWLINE

// ──────────── Terminals ────────────
PROGRAM:  "program"
VAR:      "var"
MAIN:     "main"
VOID:     "void"
INT:      "int"
FLOAT:    "float"
WHILE:    "while"
DO:       "do"
END:      "end"
IF:       "if"
ELSE:     "else"
PRINT:    "print"

CTE_STRING: ESCAPED_STRING
CTE_FLOAT:  /\d+\.\d+/
CTE_INT:    /\d+/

// Nombre del programa (solo para la cabecera)
PROG_ID: /[a-zA-Z_][a-zA-Z0-9_]*/

// Identificadores de variables y funciones
ID:      /[a-zA-Z_][a-zA-Z0-9_]*/

PLUS:      "+"
MINUS:     "-"
MULT:      "*"
DIV:       "/"
LT:        "<"
GT:        ">"
NEQ:       "!="
ASSIGN:    "="
SEMICOLON: ";"
COMMA:     ","
LPAREN:    "("
RPAREN:    ")"
LBRACE:    "{"
RBRACE:    "}"
COLON:     ":"

// ──────────── Grammar ────────────
?start: programa

programa: PROGRAM PROG_ID SEMICOLON vars funcs MAIN body END

vars: VAR ID (COMMA ID)* COLON tipo SEMICOLON vars
    | -> empty

tipo: INT | FLOAT

funcs: func*

func: VOID ID LPAREN param_list RPAREN vars body SEMICOLON

param_list: (ID COLON tipo (COMMA ID COLON tipo)*)?

body: LBRACE statement* RBRACE

statement: assign
         | print_stmt
         | f_call
         | condition
         | cycle

assign: ID ASSIGN expr SEMICOLON

print_stmt: PRINT LPAREN print_list RPAREN SEMICOLON
print_list: (expr | CTE_STRING) (COMMA (expr | CTE_STRING))*

f_call: ID LPAREN (expr (COMMA expr)*)? RPAREN SEMICOLON

condition: IF LPAREN expr RPAREN body (ELSE body)? SEMICOLON

cycle: WHILE LPAREN expr RPAREN DO body SEMICOLON

?expr: expr GT expr   -> gt
     | expr LT expr   -> lt
     | expr NEQ expr  -> neq
     | sum

?sum: sum PLUS term   -> add
    | sum MINUS term  -> sub
    | term

?term: term MULT factor -> mul
     | term DIV factor  -> div
     | factor

?factor: LPAREN expr RPAREN -> group
       | PLUS factor        -> pos
       | MINUS factor       -> neg
       | ID                 -> var
       | CTE_FLOAT          -> float
       | CTE_INT            -> int
